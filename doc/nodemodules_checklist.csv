[NODECORE_H];
;
NODE* createNodeCore(void);
void initNodeCore(NODE* node);
void destroyNodeCore(NODE* node);
;
void* getNodeContent(NODE* node);
void setNodeContent(NODE* node, void* ptr);
;
NODE* getFirstChildNode(NODE* node);
NODE* getNextSiblingNode(NODE* node);
;
void insertLinkedNodeSibling(NODE** prev_np, NODE* new_node);
NODE* removeLinkedNodeSibling(NODE** prev_np);
;
NODE** getLinkedNodeSibidxPNP(NODE* node, int idx);
NODE** getLinkedNodeSibtailPNP(NODE* node);
;
int getChildNodeIdx(NODE* node, NODE* target);
int getChildNodeCount(NODE* node);ï¼Ÿ
;
;
[NODEITERATOR_H];
;
NODESTACK* createNodeStack(int s);
void initNodeStack(NODESTACK* ns);
void destroyNodeStack(NODESTACK* ns);
;
void nodeStackPush(NODESTACK* ns, NODE* node);
NODE* nodeStackPop(NODESTACK* ns);
NODE* nodeStackRetrieve(NODESTACK* ns);
;
int getNodeStackCount(NODESTACK* ns);
int isNodeStackFull(NODESTACK* ns);
int isNodeStackEmpty(NODESTACK* ns);
;
;
NODETREE_ITR* createNodeIterator(NODE* root);
void initNodeIterator(NODETREE_ITR* itr, NODE* root);
void destroyNodeIterator(NODETREE_ITR* itr);
;
NODE* nodeitrNext(NODETREE_ITR* itr);
NODE* nodeitrGetNode(NODETREE_ITR* itr);
int nodeitrGetLevel(NODETREE_ITR* itr);
;
;
[SIMPLENODE_H];
;
NODE* createNode(int type);
void initNode(NODE* node, int type);
;
void destroyNode(NODE* node);
void rdestroyNodes(NODE* node);
void destroyChildNodes(NODE* node);
;
void setNodeType(NODE* node, int typec);
void setNodeName(NODE* node, char* name);
void setNodeValue(NODE* node, char* value);
int getNodeType(NODE* node);
char* getNodeName(NODE* node, char* buf, int len);
char* getNodeValue(NODE* node, char* buf, int len);
;
void appendChildNode(NODE* node, NODE* apnd);
void insertChildNode(NODE* node, int idx, NODE* isrt);
NODE* removeChildNode(NODE* node, int idx);
;
void printNodeInfo(NODE* node, int indent);
void traceNodes(NODE* node, int indent);
;
#endif;
