nodeCore
	{s_node: void* content, s_node* child, s_node* sibling}
	createNodeCore
	initNodeCore
	destroyNodeCore
	getFirstChildNode
	getNextSiblingNode
	insertLinkedNodeSibling
	removeLinkedNodeSibling
	getLinkedNodeSiblingPNP
	getLinkedNodeSiblingTailPNP
	getChildNodeIndex
	getChildNodeCount
	

nodeStack
	{s_nodeStack: STACK_TYPE* stack, int size, int cnt}
	createNodeStack
	destroyNodeStack
	pushNodeStack
	popNodeStack
	retrieveNodeStack
	getNodeStackCount
	isNodeStackFull
	isNodeStackEmpty


nodeIterator
	{node_iterator: nodeStack* stack, s_node* ptr}
	createNodeIterator
	destroyNodeIterator
	nodeitrNext
	nodeitrGet

simpleNode
	{s_nodecontent: int type, char* name, char* value}
	createNodeContent
	destroyNodeContent
	createNode
	destroyNode
	rdestroyNode
	destroyChildNodes
	setNodeType
	setNodeName
	setNodeValue
	getNodeType
	getNodeName
	getNodeValue
	appendChildNode
	insertChildNode
	removeChildNode
	printNodeInfo
	traceNodes
	
