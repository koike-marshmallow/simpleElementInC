/* StringCell
 * 
 * stringcellは可変長の文字列を実現するためのモジュールです。
 * 文字列を格納する領域をセルとしてひと固まりで用意します。
 * 主に構造部、イテレータ部、操作部で実装をグループ化します。
 * 構造部      : StringCellStruct.c
 * イテレータ部: StringCellIterator.c
 * 操作部      : StringCell.c
*/


struct s_strcell {
	char* cb;
	int cblen;
	struct s_strcell* next;
};
typedef struct s_strcell STRCELL;

struct s_strcell_itr {
	struct s_strcell* cell;
	struct s_strcell* prev_cell;
	int pos_idx;
};
typedef struct s_strcell_itr STRCELL_ITR;


/* 構造の説明
 * struct s_strcell
 *   char*             cb    文字列バッファの先頭アドレス
 *   int               cblen 文字列バッファの長さ
 *   struct s_strcell* next  次の文字列セル
 *
 * struct s_strcell_itr
 *   struct s_strcell* cell      現在イテレータが差しているセル
 *   struct s_strcell* prev_cell 現在のセルの前のセル
 *   int               pos_idx   セル内バッファでのイテレータの位置
*/

/* in StrincCell.c */
STRCELL* createStringCell(void);
STRCELL* createStringCell_ls(int len);
void destroyStringCell(STRCELL* head);
void destroyStringCell_nr(STRCELL* cell);

STRCELL* strcel_core_getRear(STRCELL* head, int* ret_rearpos);
STRCELL* strcel_core_getPosition(STRCELL* head, int offset, int* ret_rearpos);
void strcel_core_writeString(STRCELL* head, int celofs, char* str_ptr);

void strcel_resize(STRCELL* cell);
void strcel_getLength(STRCEL* cell);

void strcel_catString(STRCELL* cell);
void strcel_setString(STRCELL* cell);

char* strcel_copyToPtr(STRCELL* cell, char* dst, int dst_len);
char* strcel_createString(STRCELL* cell);
void strcel_outputFile(STRCELL* cell, FILE* dst);





/* in StringCellIterator */
STRCELL_ITR* createStringCellIterator(STRCELL* head);
int strcelitr_hasNext(STRCELL_ITR* itr);
char* strcelitr_next(STRCELL_ITR* itr);
int strcelitr_hasPrev(STRCELL_ITR* itr);
char* strcelitr_prev(STRCELL_ITR* itr);
char* strcelitr_get(STRCELL_ITR* itr);
void destroyStringCellIterator(STRCELL_ITR* itr);

 /* in StrincCell.c */
